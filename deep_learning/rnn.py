# -*- coding: utf-8 -*-
"""rnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vED7-RLAMIeY71HroSjMSsyv-hk3NUf7
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd  /content/gdrive/Shareddrives/BE_223A_Seizure_Project/Code/


def rnn_model(eeg_array, label, test_data, learning_rate=0.001, gradient_threshold=1, batch_size=32, epochs=2):
  train_array = eeg_array[0:100]
  val_array = eeg_array[100:]

  train_label = label[0:100]
  val_label = label[100:]

  for id, (X, y) in enumerate(zip(train_array, train_label)):

    X = X.T
    # Convert values to numpy arrays
    y = np.array([y])
    # Reshape data
    X_reshaped = X.reshape((1, X.shape[0], X.shape[1]))

    # Create the model
    n_timesteps = X.shape[1]
    learning_rate = learning_rate
    gradient_threshold = 1
    opt = Adam(learning_rate=learning_rate, clipnorm=gradient_threshold)

    model = Sequential()
    model.add(
        Bidirectional(LSTM(200, return_sequences=False), input_shape=X.shape))  # (None, N_channels, N_timesteps)
    model.add(Dense(32, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))

    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])

    X_val, y_val = val_array[id], np.array([val_label[id]])
    X_val = X_val.T
    X_val_reshaped = X_val.reshape((1, X_val.shape[0], X_val.shape[1]))
    
    history = model.fit(
      X_reshaped,
      y,
      batch_size=batch_size,
      epochs=epochs,
      validation_data=(X_val_reshaped, y_val))

  predictions = []
  preds_proba_obj = []
  for id2 in range(0,len(test_data)):
    X = test_data[id2]
    X = X.T
    X_test_reshaped = X.reshape((1, X.shape[0], X.shape[1]))
    prediction = model.predict(X_test_reshaped)
    predictions.append(prediction)
    preds_proba = model.predict_proba(X_test_reshaped)[:, 1]
    preds_proba_obj.append(preds_proba)
  return predictions, preds_proba_obj
